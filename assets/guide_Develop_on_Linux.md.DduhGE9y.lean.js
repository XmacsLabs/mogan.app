import{_ as a,c as s,a2 as n,o as t}from"./chunks/framework.YPpNXepj.js";const h=JSON.parse('{"title":"Developing on GNU/Linux","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Develop_on_Linux.md","filePath":"guide/Develop_on_Linux.md","lastUpdated":1736322693000}'),i={name:"guide/Develop_on_Linux.md"};function l(p,e,o,d,c,r){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="developing-on-gnu-linux" tabindex="-1">Developing on GNU/Linux <a class="header-anchor" href="#developing-on-gnu-linux" aria-label="Permalink to &quot;Developing on GNU/Linux&quot;">​</a></h1><h2 id="step-1-install-xmake-and-qt-6" tabindex="-1">Step 1: Install xmake and Qt 6 <a class="header-anchor" href="#step-1-install-xmake-and-qt-6" aria-label="Permalink to &quot;Step 1: Install xmake and Qt 6&quot;">​</a></h2><p>On Debian or Debian derivatives:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo add-apt-repository ppa:xmake-io/xmake</span></span>
<span class="line"><span>sudo apt install xmake</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sudo apt update</span></span>
<span class="line"><span>sudo apt install --yes build-essential libfontconfig1-dev  qt6-base-dev libqt6svg6-dev qt6-image-formats-plugins libcurl4-openssl-dev libfreetype-dev libgit2-dev zlib1g-dev libssl-dev libjpeg-turbo8-dev cmake</span></span></code></pre></div><p>On Fedora and RHEL derivatives:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo dnf update -y</span></span>
<span class="line"><span>sudo dnf groupinstall -y &quot;C Development Tools and Libraries&quot;</span></span>
<span class="line"><span>sudo dnf install -y git xmake unzip libgit2-devel fontconfig-devel libstdc++-static glibc-static qt5-qtbase-devel qt5-qtsvg-devel</span></span></code></pre></div><p>Sometimes, we need the latest xrepo:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xrepo update-repo</span></span></code></pre></div><h2 id="step-2-config-and-build" tabindex="-1">Step 2: Config and Build <a class="header-anchor" href="#step-2-config-and-build" aria-label="Permalink to &quot;Step 2: Config and Build&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xmake config --yes</span></span>
<span class="line"><span>xmake build research</span></span></code></pre></div><p>If Qt SDK is not found, we can config it manually:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xmake config --qt=/usr/lib/\`arch\`-linux-gnu/qt5/</span></span></code></pre></div><p>To switch to Qt 6, just:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xmake config --qt=/usr/lib/\`arch\`-linux-gnu/qt6/</span></span></code></pre></div><h2 id="step-3-run-tests" tabindex="-1">Step 3: Run tests <a class="header-anchor" href="#step-3-run-tests" aria-label="Permalink to &quot;Step 3: Run tests&quot;">​</a></h2><p>See <a href="./Test.html">How to test</a>。</p><h2 id="step-4-launch-mogan-research" tabindex="-1">Step 4: Launch Mogan Research <a class="header-anchor" href="#step-4-launch-mogan-research" aria-label="Permalink to &quot;Step 4: Launch Mogan Research&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xmake run research</span></span></code></pre></div><h2 id="use-vscode-to-help-code-completion" tabindex="-1">Use VSCode to help code completion <a class="header-anchor" href="#use-vscode-to-help-code-completion" aria-label="Permalink to &quot;Use VSCode to help code completion&quot;">​</a></h2><p>Install VSCode, Clangd and the Clangd plugin for VSCode. Then execute in the mogan folder</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xmake project -k compile_commands</span></span></code></pre></div><p>This will generate a compile_commands.json file under the mogan folder, and Clangd will read it to understand the organizational structure of the project, so as to avoid the error that the header file cannot be found.</p>`,22)]))}const g=a(i,[["render",l]]);export{h as __pageData,g as default};
