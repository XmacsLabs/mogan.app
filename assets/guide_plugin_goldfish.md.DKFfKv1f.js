import{_ as i,c as t,o as a,aa as n,aA as o,aB as s}from"./chunks/framework.B4EQu3MT.js";const f=JSON.parse('{"title":"Goldfish Scheme","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugin_goldfish.md","filePath":"guide/plugin_goldfish.md","lastUpdated":1755437191000}'),l={name:"guide/plugin_goldfish.md"};function d(r,e,h,c,u,p){return a(),t("div",null,[...e[0]||(e[0]=[n('<h1 id="goldfish-scheme" tabindex="-1">Goldfish Scheme <a class="header-anchor" href="#goldfish-scheme" aria-label="Permalink to “Goldfish Scheme”">​</a></h1><p><a href="https://github.com/LiiiLabs/goldfish" target="_blank" rel="">Goldfish Scheme</a> is the community edition of Liii Scheme, and Mogan STEM Suite is the community edition of Liii STEM Suite.</p><p>Goldfish Scheme is built-in as a plugin in Mogan STEM Suite, and it does not provide REPL impl by its own, instead, Mogan STEM Suite provides the structured REPL for Goldfish Scheme.</p><p>Beginners of the Scheme language can learn the Scheme language using Goldfish Scheme (R7RS) in Mogan.</p><h2 id="structured-repl" tabindex="-1">Structured REPL <a class="header-anchor" href="#structured-repl" aria-label="Permalink to “Structured REPL”">​</a></h2><p>The significant difference between a structured REPL and a common REPL is that both the input and the output can be structured. For a programming language&#39;s REPL, generally, the input is code in plain text format; in Racket, it is supported to include images as part of the code. In the Guix Scheme session, the input is still plain text Scheme code, while the output is structured documentation. This document demonstrates the structured output effect of the Goldfish Scheme session with the following example:</p><h3 id="special-rules-for-rendering" tabindex="-1">Special Rules for Rendering <a class="header-anchor" href="#special-rules-for-rendering" aria-label="Permalink to “Special Rules for Rendering”">​</a></h3><p>For Scheme snippets starting with the markup <code>document</code>、<code>math</code>、<code>equation*</code>、<code>align</code>、<code>with</code>、<code>graphics</code>:</p><p><img src="'+o+'" alt=""></p><h3 id="side-effect-and-eval-result" tabindex="-1">Side Effect and Eval Result <a class="header-anchor" href="#side-effect-and-eval-result" aria-label="Permalink to “Side Effect and Eval Result”">​</a></h3><p>Eval result is rendered in green background. Side effect is in normal white background.</p><p><img src="'+s+'" alt=""></p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to “Installation”">​</a></h2><p>No installation is required, as both Goldfish Scheme and the Goldfish Scheme plugin are built-in within Mogan.</p><h2 id="built-in-documentation-see-help-plugins-goldfish-scheme" tabindex="-1">Built-in Documentation See <code>Help -&gt; Plugins -&gt; Goldfish Scheme</code> <a class="header-anchor" href="#built-in-documentation-see-help-plugins-goldfish-scheme" aria-label="Permalink to “Built-in Documentation See Help -&gt; Plugins -&gt; Goldfish Scheme”">​</a></h2>',15)])])}const g=i(l,[["render",d]]);export{f as __pageData,g as default};
