import{_ as a,c as i,a2 as t,o as l}from"./chunks/framework.YPpNXepj.js";const h=JSON.parse('{"title":"Mogan STEM Suite v1.2.8","description":"","frontmatter":{},"headers":[],"relativePath":"guide/changelog/v1.2.8.md","filePath":"guide/changelog/v1.2.8.md","lastUpdated":1736002570000}'),n={name:"guide/changelog/v1.2.8.md"};function o(r,e,u,d,s,c){return l(),i("div",null,e[0]||(e[0]=[t('<h1 id="mogan-stem-suite-v1-2-8" tabindex="-1">Mogan STEM Suite v1.2.8 <a class="header-anchor" href="#mogan-stem-suite-v1-2-8" aria-label="Permalink to &quot;Mogan STEM Suite v1.2.8&quot;">​</a></h1><p>Mogan STEM Suite v1.2.8:</p><ul><li>Mogan Research v1.2.8</li></ul><p>TMU 1.0.2 is relatively mature now! But in v1.2.8, TMU has not been set to default yet.</p><p>TMU (in UTF-8 encoding): see you in v1.2.9!</p><h2 id="new-feature" tabindex="-1">New Feature <a class="header-anchor" href="#new-feature" aria-label="Permalink to &quot;New Feature&quot;">​</a></h2><ul><li>Math: support <code>varparallel</code> and <code>nvarparallel</code> (OSPP 2024)</li><li>GUI: display opened documents in tab bars (OSPP 2024)</li><li>Binary Plugin: Add pandoc binary plugin (OSPP 2024)</li><li>Scheme Plugins: distinguish side effect from eval result <ul><li>Brand new Goldfish Scheme plugin</li><li>Brand new Chez Scheme plugin</li><li>Brand new Guile Scheme plugin</li></ul></li><li>Plugin: support distinction of evaluation result and side effect</li></ul><h2 id="changes-for-developer" tabindex="-1">Changes for Developer <a class="header-anchor" href="#changes-for-developer" aria-label="Permalink to &quot;Changes for Developer&quot;">​</a></h2><ul><li>S7: upgraded to S7 10.11 20240702</li><li>HTML: try to exported HTML as HTML 5 (OSPP 2024)</li><li>Plugin: <code>session-enable-math-input</code> to set input mode to math input by default</li></ul>',9)]))}const g=a(n,[["render",o]]);export{h as __pageData,g as default};
