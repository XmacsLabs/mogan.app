import{_ as a,c as i,o as e,a3 as n}from"./chunks/framework.Pxy86xAp.js";const r=JSON.parse('{"title":"Developing for Windows","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Develop_on_Windows.md","filePath":"guide/Develop_on_Windows.md","lastUpdated":1755437191000}'),t={name:"guide/Develop_on_Windows.md"};function l(p,s,o,h,d,c){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="developing-for-windows" tabindex="-1">Developing for Windows <a class="header-anchor" href="#developing-for-windows" aria-label="Permalink to &quot;Developing for Windows&quot;">​</a></h1><h2 id="step-1-install-xmake" tabindex="-1">Step 1: Install xmake <a class="header-anchor" href="#step-1-install-xmake" aria-label="Permalink to &quot;Step 1: Install xmake&quot;">​</a></h2><p>Install scoop and then use scoop to install xmake</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>scoop install xmake</span></span></code></pre></div><h3 id="step-2-config" tabindex="-1">Step 2: Config <a class="header-anchor" href="#step-2-config" aria-label="Permalink to &quot;Step 2: Config&quot;">​</a></h3><p>Because libgit2 requires admin console, you need to launch a admin console to execute the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>xmake config --yes -vD -m releasedbg --plat=windows</span></span></code></pre></div><p>The next you run <code>xmake config</code>, it is ok to run without the admin console.</p><h2 id="step-3-build" tabindex="-1">Step 3: Build <a class="header-anchor" href="#step-3-build" aria-label="Permalink to &quot;Step 3: Build&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> research</span></span></code></pre></div><h2 id="step-4-run-tests" tabindex="-1">Step 4: Run tests <a class="header-anchor" href="#step-4-run-tests" aria-label="Permalink to &quot;Step 4: Run tests&quot;">​</a></h2><p>See <a href="./Test.html">How to test</a>。</p><h2 id="step-5-launch-mogan-research" tabindex="-1">Step 5: Launch Mogan Research <a class="header-anchor" href="#step-5-launch-mogan-research" aria-label="Permalink to &quot;Step 5: Launch Mogan Research&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> research</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> research</span></span></code></pre></div><h2 id="optional-vscode-support" tabindex="-1">Optional: Vscode support <a class="header-anchor" href="#optional-vscode-support" aria-label="Permalink to &quot;Optional: Vscode support&quot;">​</a></h2><p>Developers using Vscode can use xmake to generate <code>compile_command.json</code>, which can be recognized by C/C++ plugin to provide semantics highlight and so on.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --kind=compile_commands</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./.vscode</span></span></code></pre></div><p>then modify <code>.vscode/c_cpp_properties.json</code> to tell C++ lsp configs of this project:</p><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;configurations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // other configs</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;compilerPath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;your configuration&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;cppStandard&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gnu++17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;intelliSenseMode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windows-gcc-x64&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;compileCommands&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.vscode/compile_commands.json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,19)])])}const g=a(t,[["render",l]]);export{r as __pageData,g as default};
