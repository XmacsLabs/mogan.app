import{_ as s,c as e,o as i,aa as n}from"./chunks/framework.B4EQu3MT.js";const k=JSON.parse('{"title":"在GNU/Linux上开发","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/Develop_on_Linux.md","filePath":"zh/guide/Develop_on_Linux.md","lastUpdated":1755437191000}'),l={name:"zh/guide/Develop_on_Linux.md"};function t(p,a,h,d,r,o){return i(),e("div",null,[...a[0]||(a[0]=[n(`<h1 id="在gnu-linux上开发" tabindex="-1">在GNU/Linux上开发 <a class="header-anchor" href="#在gnu-linux上开发" aria-label="Permalink to “在GNU/Linux上开发”">​</a></h1><h2 id="使用xmake" tabindex="-1">使用xmake <a class="header-anchor" href="#使用xmake" aria-label="Permalink to “使用xmake”">​</a></h2><h3 id="第一步-安装xmake和qt-5" tabindex="-1">第一步：安装xmake和Qt 5 <a class="header-anchor" href="#第一步-安装xmake和qt-5" aria-label="Permalink to “第一步：安装xmake和Qt 5”">​</a></h3><p>以Debian及衍生版为例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>sudo add-apt-repository ppa:xmake-io/xmake</span></span>
<span class="line"><span>sudo apt install xmake</span></span>
<span class="line"><span></span></span>
<span class="line"><span>sudo apt update</span></span>
<span class="line"><span>sudo apt install --yes build-essential libfontconfig1-dev  qt6-base-dev libqt6svg6-dev qt6-image-formats-plugins libcurl4-openssl-dev libfreetype-dev libgit2-dev zlib1g-dev libssl-dev libjpeg-turbo8-dev cmake</span></span></code></pre></div><p>有时候需要保持xrepo是最新的，以保证使用最新的依赖的构建定义</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>xrepo update-repo</span></span></code></pre></div><h3 id="第二步-编译" tabindex="-1">第二步：编译 <a class="header-anchor" href="#第二步-编译" aria-label="Permalink to “第二步：编译”">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>xmake config --yes</span></span>
<span class="line"><span>xmake build research</span></span></code></pre></div><p>如果找不到Qt，那么在config的时候，可以手动指定，比如：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>xmake config --qt=/usr/lib/\`arch\`-linux-gnu/qt5/</span></span></code></pre></div><p>切换到Qt 6，也只需要：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>xmake config --qt=/usr/lib/\`arch\`-linux-gnu/qt6/</span></span></code></pre></div><h3 id="第三步-测试" tabindex="-1">第三步：测试 <a class="header-anchor" href="#第三步-测试" aria-label="Permalink to “第三步：测试”">​</a></h3><p>见<a href="./Test.html">如何测试</a>。</p><h3 id="第四步-启动墨干" tabindex="-1">第四步：启动墨干 <a class="header-anchor" href="#第四步-启动墨干" aria-label="Permalink to “第四步：启动墨干”">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">xmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> research</span></span></code></pre></div><h2 id="使用vscode帮助代码补全" tabindex="-1">使用VSCode帮助代码补全 <a class="header-anchor" href="#使用vscode帮助代码补全" aria-label="Permalink to “使用VSCode帮助代码补全”">​</a></h2><p>安装VSCode，Clangd以及VSCode的Clangd插件。 之后在mogan文件夹执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>xmake project -k compile_commands</span></span></code></pre></div><p>这个命令会在mogan文件夹下生成一个compile_commands.json文件，Clangd会读取它以理解项目的组织结构，从而避免找不到头文件的错误。</p>`,21)])])}const g=s(l,[["render",t]]);export{k as __pageData,g as default};
