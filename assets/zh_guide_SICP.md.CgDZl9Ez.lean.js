import{_ as l,c as e,a2 as a,o}from"./chunks/framework.BLTIpkzl.js";const u=JSON.parse('{"title":"《零基础SICP》公开课","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/SICP.md","filePath":"zh/guide/SICP.md","lastUpdated":1738382165000}'),t={name:"zh/guide/SICP.md"};function r(s,i,d,h,c,n){return o(),e("div",null,i[0]||(i[0]=[a(`<h1 id="《零基础sicp》公开课" tabindex="-1">《零基础SICP》公开课 <a class="header-anchor" href="#《零基础sicp》公开课" aria-label="Permalink to &quot;《零基础SICP》公开课&quot;">​</a></h1><p>《零基础SICP》面向任何无编程基础、对Scheme和编程的本质感兴趣的小伙伴。</p><p>我们期望读者：</p><ul><li>具有高中水平的数学基础和英文基础</li><li>对操作系统（Windows/macOS/Linux三者之一）有一定了解，能够学会如何打开终端，并使用cd命令切换当前目录</li></ul><p>如果您已经学会编程了，《零基础SICP》公开课仍旧值得您花时间观看和学习，您可以通过练习题来判断是否可以直接跳过其中的一些课程。</p><h2 id="课件和软件" tabindex="-1">课件和软件 <a class="header-anchor" href="#课件和软件" aria-label="Permalink to &quot;课件和软件&quot;">​</a></h2><p>在墨干中点击<code>帮助-&gt;墨客星球</code>，可以找到《零基础SICP》的讲义、课件、练习、勘误等信息。</p><p>本课程提供的资料：</p><ul><li>交互式SICP：<a href="https://gitee.com/XmacsLabs/interactive-sicp" target="_blank" rel="noreferrer">https://gitee.com/XmacsLabs/interactive-sicp</a><ul><li>本公开课所使用的讲义，源自SICP网页版，由墨客实验室手动整理为TeXmacs文档</li><li>该仓库中每一课的讲义和练习以单独的TeXmacs文档存在</li></ul></li><li>墨干理工套件：<a href="https://mogan.app" target="_blank" rel="noreferrer">https://mogan.app</a></li><li>S7 Scheme解释器安装包: <a href="https://gitee.com/XmacsLabs/s7-scheme-binary" target="_blank" rel="noreferrer">https://gitee.com/XmacsLabs/s7-scheme-binary</a></li><li>S7 Scheme官网：<a href="https://ccrma.stanford.edu/software/s7/" target="_blank" rel="noreferrer">https://ccrma.stanford.edu/software/s7/</a></li></ul><p>相关资料：</p><ul><li>南京大学的<a href="https://cs.nju.edu.cn/xyfeng/teaching/SICP/index.htm" target="_blank" rel="noreferrer">SICP课程主页</a></li><li>北京大学的<a href="https://www.math.pku.edu.cn/teachers/qiuzy/progtech/" target="_blank" rel="noreferrer">SICP课程主页</a></li><li>新加坡国立大学的<a href="https://www.comp.nus.edu.sg/~cs1101s/" target="_blank" rel="noreferrer">SICP课程主页</a></li><li>Berkeley的<a href="https://cs61a.org" target="_blank" rel="noreferrer">CS 61A: 计算机程序的构造和解释</a></li><li>MIT的<a href="https://ocw.mit.edu/courses/6-001-structure-and-interpretation-of-computer-programs-spring-2005/pages/syllabus/" target="_blank" rel="noreferrer">SICP课程</a></li><li>SICP中文译本：<a href="https://book.douban.com/subject/1148282/" target="_blank" rel="noreferrer">《计算机程序的构造和解释》</a></li><li>SICP课本官网：<a href="https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html" target="_blank" rel="noreferrer">https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html</a></li><li>R7RS Small: <a href="https://small.r7rs.org" target="_blank" rel="noreferrer">https://small.r7rs.org</a></li></ul><h2 id="有基础sicp第二课" tabindex="-1">有基础SICP第二课 <a class="header-anchor" href="#有基础sicp第二课" aria-label="Permalink to &quot;有基础SICP第二课&quot;">​</a></h2><ol><li><a href="https://www.bilibili.com/video/BV1Z4xPeFEdz" target="_blank" rel="noreferrer">迭代求和</a></li><li><a href="https://www.bilibili.com/video/BV19HxTewEfz" target="_blank" rel="noreferrer">线性递归求和</a></li><li><a href="https://www.bilibili.com/video/BV14Vx6e2EXY" target="_blank" rel="noreferrer">尾递归</a></li><li><a href="https://www.bilibili.com/video/BV1DqxpeTE1z" target="_blank" rel="noreferrer">斐波那契数列</a></li><li><a href="https://www.bilibili.com/video/BV1KWxYeoEzk" target="_blank" rel="noreferrer">树形递归和哈希表</a></li><li><a href="https://www.bilibili.com/video/BV1R84MezEa7" target="_blank" rel="noreferrer">副作用</a></li><li><a href="https://www.bilibili.com/video/BV1x32sYvENV" target="_blank" rel="noreferrer">函数库</a></li><li><a href="https://www.bilibili.com/video/BV1SX26YQEA4" target="_blank" rel="noreferrer">算法复杂度</a></li><li><a href="https://www.bilibili.com/video/BV1Kc2rY7Eux" target="_blank" rel="noreferrer">求b的n次幂</a></li><li><a href="https://www.bilibili.com/video/BV1qJmLYwEXw" target="_blank" rel="noreferrer">矩阵快速幂</a></li><li><a href="https://www.bilibili.com/video/BV1c72oYQEzM" target="_blank" rel="noreferrer">欧几里得算法</a></li></ol><h2 id="有基础sicp第一课" tabindex="-1">有基础SICP第一课 <a class="header-anchor" href="#有基础sicp第一课" aria-label="Permalink to &quot;有基础SICP第一课&quot;">​</a></h2><ol><li><a href="https://www.bilibili.com/video/BV1CobweCESn" target="_blank" rel="noreferrer">编程的基本原理</a></li><li><a href="https://www.bilibili.com/video/BV1rwbAegE1S" target="_blank" rel="noreferrer">表达式的求值</a></li><li><a href="https://www.bilibili.com/video/BV1EFtme4Esu" target="_blank" rel="noreferrer">命名与函数</a></li><li><a href="https://www.bilibili.com/video/BV1jRsye3ErU" target="_blank" rel="noreferrer">代换模型</a></li><li><a href="https://www.bilibili.com/video/BV1XqsXeRE39" target="_blank" rel="noreferrer">条件表达式和谓词</a></li><li><a href="https://www.bilibili.com/video/BV1SqsqezEwn" target="_blank" rel="noreferrer">牛顿法求平方根</a></li><li><a href="https://www.bilibili.com/video/BV1wJxLeiEQ1" target="_blank" rel="noreferrer">利用函数做抽象</a></li></ol><h2 id="第12课-集合、列表和二叉树" tabindex="-1">第12课：集合、列表和二叉树 <a class="header-anchor" href="#第12课-集合、列表和二叉树" aria-label="Permalink to &quot;第12课：集合、列表和二叉树&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1sr421F7Pz/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1sr421F7Pz/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f</a></li></ul><h2 id="番外-创业中-。・ω・。-ノ-菜鸟的第一台linux笔记本" tabindex="-1">番外：创业中…(｡･ω･｡)ﾉ 菜鸟的第一台Linux笔记本 <a class="header-anchor" href="#番外-创业中-。・ω・。-ノ-菜鸟的第一台linux笔记本" aria-label="Permalink to &quot;番外：创业中…(｡･ω･｡)ﾉ 菜鸟的第一台Linux笔记本&quot;">​</a></h2><ul><li>B站观看：<a href="https://www.bilibili.com/video/BV1h1421r7xd/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1h1421r7xd/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f</a></li><li>趣味创业故事短片</li></ul><h2 id="第11课-符号数据和符号求导" tabindex="-1">第11课：符号数据和符号求导 <a class="header-anchor" href="#第11课-符号数据和符号求导" aria-label="Permalink to &quot;第11课：符号数据和符号求导&quot;">​</a></h2><ul><li><p>B站回放：<a href="https://www.bilibili.com/video/BV1r7421Z7p9/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1r7421Z7p9/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f</a></p></li><li><p><code>00:31</code> 回顾：通过定义一组逻辑自洽的选择函数和构造函数，定义数据（以有理数为例）。</p></li><li><p><code>01:47</code> 辨析：列表 &amp; 单向链表 LISP = list processing</p></li><li><p><code>11:15</code> 回顾：语法糖衣</p></li><li><p><code>16:04</code> 定义符号数据——构造函数 quote</p></li><li><p><code>17:59</code> 自面量在（单次）引用之后，还是自面量。符号在引用之后，则变成了符号数据。</p></li><li><p><code>24:02</code> 定义符号数据——选择函数 unquote</p></li><li><p><code>27:09</code> 定义符号数据——参数为列表的构造函数</p></li><li><p><code>31:34</code> 定义符号数据——在列表中理解选择函数（quote、unquote、quasiquote 综合实例）</p></li><li><p><code>36:16</code> 比喻：quote是失重，unquote是加重器，quasiquote是允许里面放加重器的失重器；quasiquote 可译为准引用</p></li><li><p><code>39:29</code> eval 对符号数据求值</p></li><li><p><code>40:22</code> 实例：分子分母计算</p></li><li><p><code>49:08</code> 用符号数据可以延迟计算</p></li><li><p><code>42:46</code> 应用符号数据（实例：符号求导；符号数据可用于构造符号计算系统）</p></li><li><p><code>50:08</code> 预告：打造硅基e老师</p></li></ul><h2 id="第10课-函数式编程三板斧-map-filter-fold" tabindex="-1">第10课：函数式编程三板斧-map, filter, fold <a class="header-anchor" href="#第10课-函数式编程三板斧-map-filter-fold" aria-label="Permalink to &quot;第10课：函数式编程三板斧-map, filter, fold&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1YZ421x7Vm/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1YZ421x7Vm/?spm_id_from=333.999.0.0&amp;vd_source=316078287b560136fdb78e5901a17e4f</a></li></ul><h3 id="本期主要内容" tabindex="-1">本期主要内容 <a class="header-anchor" href="#本期主要内容" aria-label="Permalink to &quot;本期主要内容&quot;">​</a></h3><ul><li><code>01:15</code> 围绕链表（list）结构讨论函数式编程三板斧（映射、过滤、折叠）和衍生算子描述数据处理逻辑，0基础学习软件工程师的底层逻辑</li></ul><h3 id="复习-定义数据-list" tabindex="-1">（复习）定义数据：list <a class="header-anchor" href="#复习-定义数据-list" aria-label="Permalink to &quot;（复习）定义数据：list&quot;">​</a></h3><ul><li><code>02:17</code> list 的构造器：cons、空链表</li><li><code>03:52</code> list 的选择器：car、cdr、cadr</li><li><code>05:26</code> list 访问链表的第n个元素（list-ref）</li><li><code>09:43</code> list 的性质：length、list?、eq?、null?</li><li>勘误：list? 无法自己实现，是scheme解释器提供的，和 interger? 类似</li></ul><h3 id="三板斧之映射-map" tabindex="-1">三板斧之映射：map <a class="header-anchor" href="#三板斧之映射-map" aria-label="Permalink to &quot;三板斧之映射：map&quot;">​</a></h3><ul><li><code>17:12</code> map 是可以接受函数作为参数的高阶函数</li></ul><h3 id="三板斧之过滤-filter" tabindex="-1">三板斧之过滤：filter <a class="header-anchor" href="#三板斧之过滤-filter" aria-label="Permalink to &quot;三板斧之过滤：filter&quot;">​</a></h3><ul><li><code>19:58</code> filter 在 S7 是没有的，但在 SRFI 中有定义</li><li><code>21:00</code> filter 的应用</li><li><code>24:32</code> filter 的实现</li><li><code>25:37</code> 教学代码的漏洞</li></ul><h3 id="三板斧之折叠-fold-和-fold-right" tabindex="-1">三板斧之折叠：fold 和 fold-right <a class="header-anchor" href="#三板斧之折叠-fold-和-fold-right" aria-label="Permalink to &quot;三板斧之折叠：fold 和 fold-right&quot;">​</a></h3><ul><li><code>29:21</code> fold 的应用，fold 与 fold-right 的区别</li><li><code>31:01</code> fold 与 fold-right 的实现</li><li><code>34:10</code> 可视化理解 fold 与 fold-right</li></ul><h3 id="衍生算子-flatmap" tabindex="-1">衍生算子：flatmap <a class="header-anchor" href="#衍生算子-flatmap" aria-label="Permalink to &quot;衍生算子：flatmap&quot;">​</a></h3><ul><li><code>43:06</code> flatmap 的应用，与 map 对比</li><li><code>46:44</code> 在 Scheme 实现类似 Scala 的 flatten</li></ul><h3 id="衍生算子-map-filter-flatmap" tabindex="-1">衍生算子：map / filter / flatmap <a class="header-anchor" href="#衍生算子-map-filter-flatmap" aria-label="Permalink to &quot;衍生算子：map / filter / flatmap&quot;">​</a></h3><ul><li><code>48:21</code> 三板斧应用实例：全排列</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><code>54:13</code> 本课总结</li><li><code>55:39</code> SRFI</li></ul><h2 id="第9课-创办一家一周工作四天的公司" tabindex="-1">第9课：创办一家一周工作四天的公司 <a class="header-anchor" href="#第9课-创办一家一周工作四天的公司" aria-label="Permalink to &quot;第9课：创办一家一周工作四天的公司&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1AH4y157T4/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1AH4y157T4/</a></li><li>操作系统：Debian 12</li><li>墨干版本：v1.2.5.4</li></ul><p>沈浪熊猫儿（人类）总结的视频内容：</p><h3 id="一、学习小众编程语言-可以找到躺平的机会" tabindex="-1">一、学习小众编程语言，可以找到躺平的机会 <a class="header-anchor" href="#一、学习小众编程语言-可以找到躺平的机会" aria-label="Permalink to &quot;一、学习小众编程语言，可以找到躺平的机会&quot;">​</a></h3><ul><li><code>00:26</code> 创办一家一周工作四天的公司</li><li><code>01:23</code> 一些使用小众编程语言的公司和场景</li></ul><h3 id="二、三鲤的使命、愿景、价值观和四天工作制" tabindex="-1">二、三鲤的使命、愿景、价值观和四天工作制 <a class="header-anchor" href="#二、三鲤的使命、愿景、价值观和四天工作制" aria-label="Permalink to &quot;二、三鲤的使命、愿景、价值观和四天工作制&quot;">​</a></h3><ul><li><code>04:53</code> 使命是服务科技创新与教育发展</li><li><code>06:28</code> 愿景是定义人类传承、挖掘、创造知识的接口</li><li><code>08:45</code> 团队第一、知行合一、自我成长、传递快乐、独立个体</li></ul><h3 id="三、做什么和怎么做" tabindex="-1">三、做什么和怎么做 <a class="header-anchor" href="#三、做什么和怎么做" aria-label="Permalink to &quot;三、做什么和怎么做&quot;">​</a></h3><ul><li><code>23:21</code> 小e老师主导的项目是计算机代数系统，比如Mathematica（全程录制、全部开源、全靠大家）</li><li><code>30:06</code> 四天工作制的具体规则，周一到周四是工作日，周六和周日是非工作日</li></ul><h2 id="第8课-有理数的数据抽象" tabindex="-1">第8课：有理数的数据抽象 <a class="header-anchor" href="#第8课-有理数的数据抽象" aria-label="Permalink to &quot;第8课：有理数的数据抽象&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1eT421y7bf/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1eT421y7bf/</a></li><li>操作系统：Debian 12</li><li>墨干版本：v1.2.5.3</li></ul><p>MathAgape（人类）总结的视频内容</p><ul><li><code>00:11</code> 从本视频开始，进入 SICP 的第二章——构造数据抽象（第一章是构造函数抽象）。本视频对应的是 SICP 2.1.1～2.1.3的内容。</li></ul><h3 id="有理数的抽象" tabindex="-1">有理数的抽象 <a class="header-anchor" href="#有理数的抽象" aria-label="Permalink to &quot;有理数的抽象&quot;">​</a></h3><ul><li><code>01:22</code> 有理数与分式：构造函数、选择函数、显示函数</li><li><code>03:54</code> 有理数的算数运算：分式的加、减、乘、除</li><li><code>06:55</code> 定义分式加：用到 let*、选择函数、构造函数，并用 gcd 处理约分</li></ul><h3 id="抽象层级" tabindex="-1">抽象层级 <a class="header-anchor" href="#抽象层级" aria-label="Permalink to &quot;抽象层级&quot;">​</a></h3><ul><li><code>12:15</code> 接口与实现的分离</li><li><code>16:18</code> 比喻：做蛋挞不必关心先有鸡还是先有蛋</li><li><code>13:43</code> 答疑：浮点数？</li><li><code>18:22</code> 答疑：如何让用户自然语言做计算？（NLP，Torch）</li></ul><h3 id="有序对的抽象" tabindex="-1">有序对的抽象 <a class="header-anchor" href="#有序对的抽象" aria-label="Permalink to &quot;有序对的抽象&quot;">​</a></h3><ul><li><code>22:58</code> 有序对构造器、选择器</li></ul><h3 id="链表的抽象" tabindex="-1">链表的抽象 <a class="header-anchor" href="#链表的抽象" aria-label="Permalink to &quot;链表的抽象&quot;">​</a></h3><ul><li><code>26:24</code> 链表的构造器：()，cons；链表的选择器：car，cdr</li><li><code>27:55</code> 一个特殊的构造器：list</li></ul><h3 id="定义数据" tabindex="-1">定义数据 <a class="header-anchor" href="#定义数据" aria-label="Permalink to &quot;定义数据&quot;">​</a></h3><ul><li><code>35:45</code> 定义数据的一般性步骤：确定逻辑自洽的选择函数和构造函数</li><li><code>37:50</code> 例子：基于皮亚诺公理，定义自然数这种数据</li></ul><h3 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><code>42:14</code> 为什么需要抽象层级？</li><li><code>44:15</code> Scheme 原语（R7RS small）</li></ul><h3 id="答疑、补充" tabindex="-1">答疑、补充 <a class="header-anchor" href="#答疑、补充" aria-label="Permalink to &quot;答疑、补充&quot;">​</a></h3><ul><li><code>46:14</code> 答疑：关于书上 2.1.3 的代码</li><li><code>51:26</code> 补充：链表本质是递归的嵌套的 pair，即使显示出来看起来是平铺的形式</li></ul><h3 id="代码清单" tabindex="-1">代码清单 <a class="header-anchor" href="#代码清单" aria-label="Permalink to &quot;代码清单&quot;">​</a></h3><ul><li><code>54:01</code> 中文编程与分数的排版显示是如何实现的</li><li><code>58:04</code> 在构造时就化简分数</li><li><code>59:02</code> 架构师与抽象层级</li></ul><h2 id="第7课-用高阶函数做抽象-lambda-let" tabindex="-1">第7课：用高阶函数做抽象-lambda,let <a class="header-anchor" href="#第7课-用高阶函数做抽象-lambda-let" aria-label="Permalink to &quot;第7课：用高阶函数做抽象-lambda,let&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV16T42117es/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV16T42117es/</a></li><li>操作系统：Debian 12</li><li>墨干版本: v1.2.5.2</li></ul><p>MathAgape（人类）总结的视频内容</p><h3 id="预热" tabindex="-1">预热 <a class="header-anchor" href="#预热" aria-label="Permalink to &quot;预热&quot;">​</a></h3><ul><li><code>00:19</code> 用 let 循环一个函数运行多次（这是针对习题1.22-1.24的答疑；有些程序运行一次时间极短，难以统计时间，可用循环很多次的方式解决）</li><li><code>03:55</code> 比较 Python</li></ul><h3 id="正课" tabindex="-1">正课 <a class="header-anchor" href="#正课" aria-label="Permalink to &quot;正课&quot;">​</a></h3><ul><li><code>07:14</code> 本课会替换掉书本上较为复杂的数学例子，让编程教程更易懂</li><li><code>08:43</code> 回顾第一课的观念：编程的基本原理是对数据和计算的组合和抽象（总结，非书上原话）；本课重点：用函数去做计算的组合和抽象</li><li><code>09:18</code> 以求和公式为例，讲解在参数中传递函数值（函数也可作为参数）</li><li><code>12:42</code> 用 lambda 构造匿名函数的好处</li><li><code>14:46</code> 以斐波那契数对，讲解用 let 创建局部变量的好处（避免重复计算，方便修改）</li><li><code>17:36</code> 实例：区间折半法，搜索算法，二分查找法</li><li><code>29:08</code> 实例：寻找不动点（在函数的有限次迭代之后回到相同值的点叫做周期点；不动点是周期等于 1 的周期点）</li><li><code>34:32</code> 总结</li></ul><h3 id="答疑" tabindex="-1">答疑 <a class="header-anchor" href="#答疑" aria-label="Permalink to &quot;答疑&quot;">​</a></h3><ul><li><code>38:32</code> Scheme 的 let 相当于 Python 的？；宏：let*；let 与 define</li></ul><h2 id="第6-2课-时空复杂度习题1-14-1-20讨论" tabindex="-1">第6.2课：时空复杂度习题1.14~1.20讨论 <a class="header-anchor" href="#第6-2课-时空复杂度习题1-14-1-20讨论" aria-label="Permalink to &quot;第6.2课：时空复杂度习题1.14~1.20讨论&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1E1421U7AM/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1E1421U7AM/</a></li><li>操作系统：Windows 11</li><li>墨干版本：v1.2.5.1</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><code>00:22</code> 习题1.14</li><li><code>08:07</code> 习题1.15 <ul><li><code>08:46</code> 法1:用调试控制台查看计算次数</li><li><code>09:37</code> 法2:用全集变量输出计算次数</li><li><code>13:22</code> 法3:用参数变量模拟全局变量，更符合函数式编程的本意</li></ul></li><li><code>14:28</code> 习题1.16 <ul><li><code>14:34</code> 用分段函数表示</li></ul></li><li><code>19:41</code> 习题1.17 <ul><li><code>20:22</code> 位运算</li><li><code>31:28</code> 逻辑与</li></ul></li><li><code>38:12</code> 习题1.18 <ul><li><code>39:45</code> 矩阵乘法</li><li><code>42:23</code> 用 Octave 插件计算矩阵</li><li><code>45:33</code> 下载 Octave</li></ul></li><li><code>47:08</code> 习题1.20 <ul><li><code>51:00</code> 打印应用序求值计算过程次数</li></ul></li></ul><h2 id="第6-1课-时空复杂度随堂练习答疑" tabindex="-1">第6.1课：时空复杂度随堂练习答疑 <a class="header-anchor" href="#第6-1课-时空复杂度随堂练习答疑" aria-label="Permalink to &quot;第6.1课：时空复杂度随堂练习答疑&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV13r421h7gi/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV13r421h7gi/</a></li><li>操作系统：Windows 11</li><li>墨干版本：v1.2.5.1</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><code>00:24</code> 优化 list-min</li><li><code>03:28</code> 实现 append</li><li><code>04:49</code> 比较不同斐波那契算法的时空复杂度，并通过实验比较真实消耗时间（详细讲解了数形递归的时空复杂度如何估算）</li><li><code>15:52</code> 墨干图形编程</li></ul><h2 id="第5课-时空复杂度" tabindex="-1">第5课：时空复杂度 <a class="header-anchor" href="#第5课-时空复杂度" aria-label="Permalink to &quot;第5课：时空复杂度&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1N1421Q78o/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1N1421Q78o/</a></li><li>操作系统：UOS 1060 (龙芯3A5000)</li><li>墨干版本：v1.2.5.1</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><code>00:12</code> 介绍我们的官方主页，这里汇总零基础SICP公开课的所有信息：<a href="https://mogan.app/zh/guide/SICP.html" target="_blank" rel="noreferrer">https://mogan.app/zh/guide/SICP.html</a></li><li><code>02:48</code> 源起杂谈：南京大学的SICP课程（冯新宇）</li><li><code>10:46</code> 本课开始</li><li><code>11:54</code> 什么是正则？</li><li><code>15:42</code> Θ记法、增长阶 <ul><li><code>18:00</code> 算法导论对 Θ、O、Ω 的形式化定义</li></ul></li><li><code>20:22</code> 链表（list）的底层原理 <ul><li><code>27:30</code> 求链表长度/链表中最小值的时间复杂度</li><li><code>31:46</code> 【练习1:优化 list-min】</li></ul></li><li><code>34:38</code> range（n） <ul><li><code>37:58</code> 【练习2:用 cons 实现 append】</li></ul></li><li><code>43:32</code> 求幂算法 <ul><li><code>44:14</code> 应用序展开，递归，延迟计算，栈，空间复杂度</li></ul></li><li><code>1:02:04</code> 求幂算法优化方案</li><li><code>1:14:34</code> 最大公约数 <ul><li><code>1:16:30</code> 【练习3:证明欧几里得算法的复杂度为Θ(log n) 】</li></ul></li><li><code>1:18:14</code> 总结 <ul><li><code>1:24:30</code> 【练习4:找到最优化的斐波那契数列，实验看看它在3s内能算到的最大值】</li></ul></li><li><code>1:30:04</code> 排序算法 <ul><li><code>1:30:26</code> 不可变结构（immutable）</li><li><code>1:32:42</code> 冒泡排序</li></ul></li></ul><h2 id="第4-2课-递归与迭代-习题1-11-1-13" tabindex="-1">第4.2课：递归与迭代 习题1.11~1.13 <a class="header-anchor" href="#第4-2课-递归与迭代-习题1-11-1-13" aria-label="Permalink to &quot;第4.2课：递归与迭代 习题1.11~1.13&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV14t421L7Pg/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV14t421L7Pg/</a></li><li>操作系统：Windows 10</li><li>墨干版本：v1.2.5</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><code>00:23</code> 习题 1.9 复习 <ul><li>辨析过程（procedure）与计算过程（process）</li></ul></li><li><code>03:57</code> 习题 1.10 复习 <ul><li>考虑n为非自然数的情况</li></ul></li><li><code>08:13</code> 习题1.12 杨辉三角</li><li><code>11:48</code> 怎样下载、使用解释器（这次是Windows系统的教程，MacOS 见上期）</li><li><code>22:26</code> 副作用</li><li><code>30:53</code> 在cmd里打印杨辉三角</li><li><code>36:08</code> 练习：写出和书上格式一样居中对齐的杨辉三角】</li><li><code>43:42</code> 在墨干的调试控制台里打印杨辉三角（用for）</li><li><code>55:48</code> for 循环的定义（宏）</li><li><code>37:42</code> 习题1.13 证明Fib(n)以指数增长</li><li><code>59:53</code> 答疑：习题1.2</li></ul><p>注意：这一期中讲到quasiquote，实际上是墨干V1.2.5的一个错误，这个错误我们将在下周一（2024/03/18）之前发布的墨干V1.2.5.1中解决，目前不会影响大家学习SICP第一章的。</p><h2 id="第4-1课-递归与迭代-习题1-9-1-10" tabindex="-1">第4.1课：递归与迭代 习题1.9~1.10 <a class="header-anchor" href="#第4-1课-递归与迭代-习题1-9-1-10" aria-label="Permalink to &quot;第4.1课：递归与迭代 习题1.9~1.10&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1Kz421Q72B/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1Kz421Q72B/</a></li><li>操作系统：macOS 14</li><li>墨干版本：v1.2.5</li><li>勘误：英文课件习题1.13的希腊字母 ψ 应读作 psai</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><p><code>01:31</code> 复习：代码清单</p></li><li><p><code>04:44</code> 技巧：用scheme生成墨干里的树</p><div class="language-scheme vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stree-&gt;tree </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       (tree </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (tree </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          (tree </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span></code></pre></div></li><li><p><code>06:28</code> 习题1.9</p><ul><li>用 inc、dec实现加法的两种方式</li><li>递归/迭代的计算过程（可参考书上p.21-23）</li></ul></li><li><p><code>11:41</code> 习题1.10</p><ul><li>Ackermann 函数</li><li>墨干的可折叠结构（13:04） <ul><li>插入-&gt;可运行-&gt;Scheme</li><li>通过回车操控折叠</li></ul></li></ul></li><li><p><code>16:09</code> 习题1.13 提示</p></li><li><p><code>20:21</code> 怎样下载、使用解释器</p></li></ul><ul><li><code>20:51</code> 下载地址</li><li><code>20:59</code> macOS 演示教程<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">首先打开“终端”</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">进入家目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">查看家目录</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">新建文件夹</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">把下载的文件放到</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件夹，可改短文件名为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s7</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">添加可执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./s7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ctrl+c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">退出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">touch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add.scm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">创建</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">编辑</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 文件，例如：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (+ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">display</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ./s7 add.scm ; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">运行并查看时间</span></span></code></pre></div></li></ul><h2 id="第3课-递归与迭代" tabindex="-1">第3课：递归与迭代 <a class="header-anchor" href="#第3课-递归与迭代" aria-label="Permalink to &quot;第3课：递归与迭代&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1UJ4m1a7PA/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1UJ4m1a7PA/</a></li><li>操作系统: Windows 11</li><li>墨干版本: v1.2.5</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><code>00:45</code> 答疑 关于REPL <ul><li>以文心一言类比REPL</li><li>没有REPL的语言？ c语言</li><li>编译器与解释器的区别</li></ul></li><li><code>12:01</code> 复习：条件表达式 <ul><li>应用序求值</li><li>短路运算</li><li>以围棋类比scheme语言</li></ul></li><li><code>31:15</code> 循环：求和（书上是阶乘） <ul><li>伪代码与常规写法（for、set!）</li><li>线性递归</li><li>线性递归的应用序展开</li></ul></li><li><code>01:03:00</code> 递归&amp;迭代：斐波那契数列 <ul><li>树形递归</li><li>两种迭代法实现</li><li>比较三种算法的效率（焦点工具栏-&gt;输出选项-&gt;显示花费时间）</li></ul></li></ul><h2 id="第2-2课-编程的基本原理-习题1-7-1-9" tabindex="-1">第2.2课：编程的基本原理 习题1.7~1.9 <a class="header-anchor" href="#第2-2课-编程的基本原理-习题1-7-1-9" aria-label="Permalink to &quot;第2.2课：编程的基本原理 习题1.7~1.9&quot;">​</a></h2><ul><li>B站回放: <a href="https://www.bilibili.com/video/BV1gx4y1C7wn/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1gx4y1C7wn/</a></li><li>操作系统: macOS 13 (M1芯片)</li><li>墨干版本：v1.2.4</li></ul><p>MathAgape（人类）总结的视频内容：</p><ul><li><code>00:35</code> 习题1.7 <ul><li>关键1：把 good-enough? 的算法从“绝对误差”改成“相对误差”，即可避免被开方数过小或过大导致的问题；</li><li>关键2：由于 sqrt 已经在标准库中，做练习时建议起一个新名字如 sqrt-new，以免混淆</li></ul></li><li><code>06:40</code> 开发技巧：如何一次性执行全部代码，而不是一个个回车 <ul><li>方法1：转成 .scm 文件，再使用“调试控制台”或“终端”查看</li><li>方法2：焦点工具栏：求值-&gt;全部求值</li></ul></li><li><code>16:48</code> 如何交作业 <ul><li>文件-&gt;导出-&gt;可编辑PDF（方便我们在邮箱预览）</li></ul></li><li><code>24:47</code> 习题1.9 <ul><li>预热讨论：什么是inc、dec；什么是寄存器</li></ul></li></ul><h2 id="第2-1课-编程的基本原理-习题1-1-1-8" tabindex="-1">第2.1课：编程的基本原理 习题1.1~1.8 <a class="header-anchor" href="#第2-1课-编程的基本原理-习题1-1-1-8" aria-label="Permalink to &quot;第2.1课：编程的基本原理 习题1.1~1.8&quot;">​</a></h2><ul><li>B站回放: <a href="https://www.bilibili.com/video/BV1kU421d7jz/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1kU421d7jz/</a></li><li>操作系统: macOS 13 (M1芯片)</li><li>墨干版本：v1.2.4</li><li>内容：第一章第一节的练习题</li><li>勘误：习题1.7的讲解有误，正确思路是：把绝对误差的算法改成相对误差。</li></ul><h2 id="第1课-编程的基本原理" tabindex="-1">第1课：编程的基本原理 <a class="header-anchor" href="#第1课-编程的基本原理" aria-label="Permalink to &quot;第1课：编程的基本原理&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1cp421f7xP/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1cp421f7xP/</a></li><li>操作系统：macOS 13 (M1芯片)</li><li>墨干版本：v1.2.4</li><li>内容 <ul><li>表达式</li><li>命名与环境</li><li>组合式的求值</li><li>复合函数</li><li>函数应用的代换模型</li><li>条件表达式和谓词</li></ul></li></ul><h2 id="第0课-准备scheme编程的环境" tabindex="-1">第0课：准备Scheme编程的环境 <a class="header-anchor" href="#第0课-准备scheme编程的环境" aria-label="Permalink to &quot;第0课：准备Scheme编程的环境&quot;">​</a></h2><ul><li>B站回放：<a href="https://www.bilibili.com/video/BV1CK421y77g/" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1CK421y77g/</a></li><li>操作系统：UOS 1050 (龙芯3A5000)</li><li>墨干版本：v1.2.4</li><li>内容： <ul><li>如何下载安装墨干</li><li>如何在墨干中插入Scheme会话</li><li>如何通过<code>帮助-&gt;墨客星球</code>找到《零基础SICP》的交互式讲义、课件、练习、代码清单</li></ul></li></ul>`,113)]))}const b=l(t,[["render",r]]);export{u as __pageData,b as default};
